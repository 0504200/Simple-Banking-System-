#include <iostream>
#include <vector>
#include <string>
#include <fstream>

using namespace std;

class Account {
public:
    Account(string name, long long accountNumber, double balance) :
        name(name), accountNumber(accountNumber), balance(balance) {}

    string getName() const { return name; }
    long long getAccountNumber() const { return accountNumber; }
    double getBalance() const { return balance; }

    void deposit(double amount) {
        balance += amount;
        cout << "Deposit successful. New balance: " << balance << endl;
    }

    void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            cout << "Withdrawal successful. New balance: " << balance << endl;
        } else {
            cout << "Insufficient funds." << endl;
        }
    }

private:
    string name;
    long long accountNumber;
    double balance;
};

class Bank {
public:
    void createAccount(string name, long long accountNumber, double balance) {
        accounts.push_back(Account(name, accountNumber, balance));
        cout << "Account created successfully." << endl;
    }

    void deleteAccount(long long accountNumber) {
        for (int i = 0; i < accounts.size(); i++) {
            if (accounts[i].getAccountNumber() == accountNumber) {
                accounts.erase(accounts.begin() + i);
                cout << "Account deleted successfully." << endl;
                return;
            }
        }
        cout << "Account not found." << endl;
    }

    void viewAllAccounts() {
        for (const Account& account : accounts) {
            cout << "Name: " << account.getName() << endl;
            cout << "Account Number: " << account.getAccountNumber() << endl;
            cout << "Balance: " << account.getBalance() << endl;
            cout << endl;
        }
    }

    void searchAccount(long long accountNumber) {
        for (const Account& account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                cout << "Name: " << account.getName() << endl;
                cout << "Account Number: " << account.getAccountNumber() << endl;
                cout << "Balance: " << account.getBalance() << endl;
                return;
            }
        }
        cout << "Account not found." << endl;
    }

    void transaction(long long accountNumber, char type, double amount) {
        for (Account& account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                if (type == 'D') {
                    account.deposit(amount);
                } else if (type == 'W') {
                    account.withdraw(amount);
                } else {
                    cout << "Invalid transaction type." << endl;
                }
                return;
            }
        }
        cout << "Account not found." << endl;
    }

private:
    vector<Account> accounts;
};

int main() {
    Bank bank;
    int choice;
    while (true) {
        cout << "1. Create Account\n";
        cout << "2. Delete Account\n";
        cout << "3. View All Accounts\n";
        cout << "4. Search Account\n";
        cout << "5. Transaction (Deposit/Withdraw)\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1: {
                string name;
                long long accountNumber;
                double balance;
                cout << "Enter name: ";
                cin >> name;
                cout << "Enter account number: ";
                cin >> accountNumber;
                cout << "Enter initial balance: ";
                cin >> balance;
                bank.createAccount(name, accountNumber, balance);
                break;
            }
            // ... (rest of the cases for other functionalities)
            case 6:
                cout << "Exiting..." << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
}
